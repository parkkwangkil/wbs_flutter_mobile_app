import 'package:flutter/material.dart';
import 'package:url_launcher/url_launcher.dart';

class AiAssistantPage extends StatelessWidget {
  const AiAssistantPage({super.key});

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏'),
        backgroundColor: Theme.of(context).primaryColor,
        foregroundColor: Colors.white,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏôÄ ÎåÄÌôîÌïòÏó¨ ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨Ïóê ÎèÑÏõÄÏùÑ Î∞õÏúºÏÑ∏Ïöî!',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            Expanded(
              child: GridView.count(
                crossAxisCount: 2,
                crossAxisSpacing: 16,
                mainAxisSpacing: 16,
                children: [
                  _buildAiCard(
                    context,
                    'Claude AI',
                    'AnthropicÏùò Í∞ïÎ†•Ìïú AI',
                    Icons.smart_toy,
                    Colors.blue,
                    'https://claude.ai/chat',
                    'ÌîÑÎ°úÏ†ùÌä∏ Í≥ÑÌöç, ÏóÖÎ¨¥ Î∂ÑÌï¥, Î¨∏ÏÑú ÏûëÏÑ±Ïóê ÌäπÌôî',
                  ),
                  _buildAiCard(
                    context,
                    'ChatGPT',
                    'OpenAIÏùò Ïù∏Í∏∞ AI',
                    Icons.chat,
                    Colors.green,
                    'https://chat.openai.com/',
                    'Îã§ÏñëÌïú Ï£ºÏ†úÏùò ÏßàÎ¨∏Í≥º ÎãµÎ≥Ä, Ï∞ΩÏùòÏ†Å ÏïÑÏù¥ÎîîÏñ¥',
                  ),
                  _buildAiCard(
                    context,
                    'Gemini',
                    'GoogleÏùò AI Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏',
                    Icons.auto_awesome,
                    Colors.orange,
                    'https://gemini.google.com/',
                    'Í≤ÄÏÉâÍ≥º Ï†ïÎ≥¥ Î∂ÑÏÑù, Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÌôúÏö©',
                  ),
                  _buildAiCard(
                    context,
                    'Copilot',
                    'MicrosoftÏùò AI ÏΩîÎî© Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏',
                    Icons.code,
                    Colors.purple,
                    'https://copilot.microsoft.com/',
                    'ÏΩîÎî©, Í∞úÎ∞ú, Í∏∞Ïà†Ï†Å Î¨∏Ï†ú Ìï¥Í≤∞',
                  ),
                ],
              ),
            ),
            const SizedBox(height: 20),
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: Colors.grey[100],
                borderRadius: BorderRadius.circular(12),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'üí° ÏÇ¨Ïö© ÌåÅ',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(height: 8),
                  const Text(
                    '‚Ä¢ Í∞Å AIÎäî ÏÑúÎ°ú Îã§Î•∏ Í∞ïÏ†êÏùÑ Í∞ÄÏßÄÍ≥† ÏûàÏäµÎãàÎã§\n'
                    '‚Ä¢ ÌîÑÎ°úÏ†ùÌä∏ Í¥ÄÎ¶¨: Claude AI Ï∂îÏ≤ú\n'
                    '‚Ä¢ Ï∞ΩÏùòÏ†Å ÏïÑÏù¥ÎîîÏñ¥: ChatGPT Ï∂îÏ≤ú\n'
                    '‚Ä¢ Ï†ïÎ≥¥ Í≤ÄÏÉâ: Gemini Ï∂îÏ≤ú\n'
                    '‚Ä¢ Í∞úÎ∞ú Í¥ÄÎ†®: Copilot Ï∂îÏ≤ú',
                    style: TextStyle(fontSize: 14),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAiCard(
    BuildContext context,
    String title,
    String subtitle,
    IconData icon,
    Color color,
    String url,
    String description,
  ) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(12),
      ),
      child: InkWell(
        onTap: () => _openAiWebsite(context, title, url),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(icon, color: color, size: 28),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      title,
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Text(
                subtitle,
                style: TextStyle(
                  fontSize: 12,
                  color: Colors.grey[600],
                ),
              ),
              const SizedBox(height: 12),
              Text(
                description,
                style: const TextStyle(fontSize: 12),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const Spacer(),
              Container(
                width: double.infinity,
                padding: const EdgeInsets.symmetric(vertical: 8),
                decoration: BoxDecoration(
                  color: color.withOpacity(0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Text(
                  'Ïó¥Í∏∞',
                  textAlign: TextAlign.center,
                  style: TextStyle(
                    color: color,
                    fontWeight: FontWeight.bold,
                    fontSize: 12,
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Future<void> _openAiWebsite(BuildContext context, String aiName, String url) async {
    try {
      final Uri uri = Uri.parse(url);
      if (await canLaunchUrl(uri)) {
        await launchUrl(uri, mode: LaunchMode.externalApplication);
      } else {
        _showErrorSnackBar(context, '$aiName ÏõπÏÇ¨Ïù¥Ìä∏Î•º Ïó¥ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
    } catch (e) {
      _showErrorSnackBar(context, 'Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: $e');
    }
  }

  void _showErrorSnackBar(BuildContext context, String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
      ),
    );
  }
}
